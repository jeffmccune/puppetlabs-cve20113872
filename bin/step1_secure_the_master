#! /bin/bash
#
set -e
set -u

export PATH="/opt/puppet/bin:$PATH"

puppet resource service pe-httpd ensure=stopped hasstatus=true

# As LAK points out, configuring Puppet to communicate with a master
# using a name that is not in CN or CERTDNSNAMES will secure the
# entire system again.
# We need a new certificate to do this...
old_master_cert="$(puppet master --configprint certname)"
new_master_cert="${1:-"${old_master_cert}.new"}"

confdir="$(puppet master --configprint confdir)"
ssldir="$(puppet master --configprint ssldir)"
autosign="${confdir}/autosign.conf"
puppetconf="${confdir}/puppet.conf"
hostcrl="$(puppet master --configprint hostcrl)"

# The new CA CN _must_ be different than the old CA CN
old_ca_cn="$(puppet master --configprint ca_name)"

# Make sure autosign is off.
echo "Making sure autosign is turned off ... (${autosign})"
if [[ -e "${autosign}" ]]; then
  mv "${autosign}" "${autosign}.disabled"
  echo "Disabled autosign by moving $autosign to ${autosign}.disabled"
else
  echo "Autosign does not appear to be enabled.  (${autosign} does not exist)"
fi

# Make sure certdnnames are off.
echo "Making sure certdnsnames are turned off ... (${puppetconf})"
perl -p -l -i.backup1 -e 's/^(\s*)(certdnsnames\b.*$)/$1# Disabled to mitigate  CVE-2011-3872\n$1# $2/' "${puppetconf}"

# Replace the old master name with the new master name
echo "Reconfiguring puppet.conf to switch names..."
perl -p -l -i.backup2 -e 's/^(\s*)(.*?=)(\s+)('"${old_master_cert}"')\s*$/$1# Name Fix: $4 => '"${new_master_cert}"'\n$1$2$3'"${new_master_cert}"'/g' "${puppetconf}"

# PE configures the fileserver using the old name by default in site.pp  We need to fix this
echo "Patching site.pp to update fileserver resources"
perl -p -l -i.backup1 -e 's/\b(server\s*=>\s*.*?)('"${old_master_cert}"')(\W*)/$1'"${new_master_cert}"'$3/g' "${confdir}/manifests/site.pp"

apachevhost="/etc/puppetlabs/httpd/conf.d/puppetmaster.conf"
echo "Patching $apachevhost"
# Reconfigure PE Apache to use the new master SSL certificate
perl -p -l -i.backup1 -e 's,^(\s*?)(SSLCertificateFile\s+)(.*)$,$1# CVE-2011-3872 Fix (Was: $3)\n$1$2'"${ssldir}/certs/${new_master_cert}.pem"',g' "${apachevhost}"
perl -p -l -i.backup2 -e 's,^(\s*?)(SSLCertificateKeyFile\s+)(.*)$,$1# CVE-2011-3872 Fix (Was: $3)\n$1$2'"${ssldir}/private_keys/${new_master_cert}.pem"',g' "${apachevhost}"
# Reconfigure PE Apache to use the CRL Bundle
perl -p -l -i.backup3 -e 's,^(\s*?)(SSLCARevocationFile\s+)(.*)$,$1# CVE-2011-3872 Fix (Was: $3)\n$1$2'"${ssldir}/crl_bundle.pem"',g' "${apachevhost}"
# Reconfigure PE Apache to authenticate the Old CA AND the New CA
perl -p -l -i.backup4 -e 's,^(\s*?)(SSLCACertificateFile\s+)(.*)$,$1# CVE-2011-3872 Fix (Was: $3)\n$1$2'"${ssldir}/certs/ca_bundle.pem"',g' "${apachevhost}"
# This isn't strictly necessary since we only use self signed CA's and not chained CA's
perl -p -l -i.backup4 -e 's,^(\s*?)(SSLCertificateChainFile\s+)(.*)$,$1# CVE-2011-3872 Fix (Was: $3)\n$1$2'"${ssldir}/certs/ca_bundle.pem"',g' "${apachevhost}"

# Generate the new SSL certificate using the old CA
# NOTE (THIS STEP we need to get a good, new name for the end user)
puppet cert generate "${new_master_cert}"

# Move the SSL directory.
oldssldir="${ssldir}.previous"
echo "Moving ${ssldir} to ${oldssldir}"
mv "${ssldir}" "${oldssldir}"

# Generate the new CA
echo "Generating the new CA ..."
# NOTE: We're generating a certificate for the old master's name using the new CA.
# JJM - I anticipate the end user will ultimately "switch back" to the old name
# once all of the agents have been migrated.
puppet cert generate --ca_name "Puppet CA: ${new_master_cert}" --certdnsnames "${new_master_cert}" "${old_master_cert}"

# Copy the new, secure SSL certificate generated by the OLD CA into the location
# used by the PE Apache server
echo "Copying puppet master's secured certificate into place..."
for d in certs private_keys public_keys; do
  # NOTE, we copy the new cert, e.g. "puppetmaster.secure" to the old name, e.g. "puppetmaster"
  cp -p "${oldssldir}/${d}/${new_master_cert}.pem" "${ssldir}/${d}/${new_master_cert}.pem"
done

# Configure Apache to trust old clients:
# JJM - We're using a "ca_bundle and crl_bundle" which Puppet doesn't
# know anything about to make it easier to "clean up" after the migration.
cat "${ssldir}"/certs/ca.pem > "${ssldir}/certs/ca_bundle.pem"
cat "${oldssldir}"/certs/ca.pem  >> "${ssldir}"/certs/ca_bundle.pem
# JJM: FIXME (Puppet) The ORDER IS IMPORTANT.  The Agent appears to only read the first CRL in this bundle...  =(
cat "${oldssldir}"/crl.pem > "${ssldir}"/crl_bundle.pem
cat "${ssldir}"/crl.pem >> "${ssldir}"/crl_bundle.pem
# Copy the old CA certificate into the new SSL directory, clearly marking it as the previous one.
cp -p "${oldssldir}"/certs/ca.pem "${ssldir}"/certs/ca_previous.pem

# The agent on the master needs the same bundles as the Apache server does:
cp -p "${ssldir}/certs/ca_bundle.pem" "${ssldir}/certs/ca.pem"
cp -p "${ssldir}/crl_bundle.pem" "${ssldir}/crl.pem"

# At this point, existing agents should be able to communicate with the master.  New certificates
# will be signed by the new CA.
puppet resource service pe-httpd ensure=running hasstatus=true

# Run Puppet Agent so that MCollective Self-Heals itself.
puppet agent --test

echo ""
echo "Your master has been reconfigured with a new name to mitigate CVE-2011-3872"
echo "Your agents will not work until they're configured to use this new name."
echo "You can expect to receive the error: Failed to generate additional resources using 'eval_generate': hostname was not match with the server certificate"
echo "If your name service is configured already, your agents should work with the following command:"
echo ""
echo "puppet agent --test --server ${new_master_cert}"
echo ""
echo "This command may help you switch your puppet.conf on all of the agents."

