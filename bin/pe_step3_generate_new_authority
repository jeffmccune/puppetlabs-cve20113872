#! /bin/bash
#
set -e
set -u

# Steps:
# Update puppet.conf
# Move the existing SSL directory out of the way
# Generate a new CA
# Configure Apache to trust clients with certificates issued by the new and old CA.
# Add the cve20113872::newcsr class to all of the agent catalogs.

module="cve20113872"
vardir="$(puppet master --configprint vardir)"
confdir="$(puppet master --configprint confdir)"
ssldir="$(puppet master --configprint ssldir)"
puppetconf="$(puppet master --configprint config)"
certname="$(puppet master --configprint certname)"
old_ca_cn="$(puppet master --configprint ca_name)"

apachevhost="/etc/puppetlabs/httpd/conf.d/puppetmaster.conf"
timestamp="$(ruby -e 'puts Time.now.to_i')"
idx=0

# This is some shell magic to read a file into a variable if the
# variable isn't already set.
: ${DNS_NAME:=$(cat "${vardir}/${module}/dns_name")}
if [[ -z "${DNS_NAME}" ]]; then
  echo "Error: Could not determine the intermediate dns name from step1." >&2
  echo "Did you run step1 first?" >&2
  exit 1
fi
: ${DNS_ALT_NAMES:=$(cat "${vardir}/${module}/alt_names")}
if [[ -z "${DNS_ALT_NAMES}" ]]; then
  echo "Error: Could not determine the certdnsnames from step1." >&2
  echo "Did you run step1 first?" >&2
  echo "If you do not want any alternate names in your new master certificate" >&2
  echo "simply touch ${vardir}/${module}/alt_names (Create an empty file)" >&2
  exit 1
fi

# This is disabled at this point in puppet.conf, so we have to read it from what
# we wrote out in step1
certdnsnames="${DNS_ALT_NAMES}"
intermediate_name="${DNS_NAME}"

echo -n "Stopping Puppet Master..." >&2
puppet resource service pe-httpd ensure=stopped hasstatus=true 2>&1 >/dev/null
echo "done." >&2

# Patch the CA name setting in puppet.conf
# This is a ruby implementation of "grep"
if ruby -e 'while gets() do; exit(0) if /^\s*ca_name\s*=/; end; exit 1;' "${puppetconf}"
then
  # This replacement is for the case we already have ca_name in the config file
  ruby -p -l -i.backup.${timestamp}.${idx} -e \
    'gsub(/^(\s*)(\s*ca_name)(\s*=\s*)(.*)$/) { "#{$1}# CVE-2011-3872 Previous Name: #{$4}\n#{$1}ca_name = '"'Puppet CA: ${intermediate_name}'"'" }' \
    "${puppetconf}"
  ((idx++))
else
  echo "Adding ca_name setting to [main] in puppet.conf ..." >&2
  # This replacement is for when we need to add ca_name to the config file
  ruby -p -l -i.backup.${timestamp}.${idx} -e \
    'gsub(/^(\s*)(\[main\].*)$/) { "#{$2}\n    # CVE-2011-3872 Previous Name: '"${old_ca_cn}"'\n    ca_name = '"'Puppet CA: ${intermediate_name}'"'" }' \
    "${puppetconf}"
  ((idx++))
fi

# Move the SSL directory.
oldssldir="${ssldir}.previous"
echo "Moving ${ssldir} to ${oldssldir}"
mv "${ssldir}" "${oldssldir}"

# Generate the new CA
echo -n "Generating the new CA ..." >&2
puppet cert --generate --certdnsnames "${certdnsnames}" "${certname}"
echo "done." >&2

# Copy the new, secure SSL certificate generated by the OLD CA into the location
# used by the PE Apache server
echo "Copying puppet master's secured certificate into place..."
for d in certs private_keys public_keys; do
  # NOTE, we copy the new cert, e.g. "puppetmaster.secure" to the old name, e.g. "puppetmaster"
  cp -p "${oldssldir}/${d}/${certname}.pem" "${ssldir}/${d}/${certname}.pem"
done

# Configure Apache to trust old clients:
# JJM - We're using a "ca_bundle and crl_bundle" which Puppet doesn't
# know anything about to make it easier to "clean up" after the migration.
cat "${ssldir}"/certs/ca.pem > "${ssldir}/certs/ca_bundle.pem"
cat "${oldssldir}"/certs/ca.pem  >> "${ssldir}"/certs/ca_bundle.pem
chmod 644 "${ssldir}"/certs/ca_bundle.pem
# JJM: FIXME (Puppet) The ORDER IS IMPORTANT.  The Agent appears to only read the first CRL in this bundle...  =(
cat "${oldssldir}"/crl.pem > "${ssldir}"/crl_bundle.pem
cat "${ssldir}"/crl.pem >> "${ssldir}"/crl_bundle.pem
chmod 644 "${ssldir}"/crl_bundle.pem

# The agent on the master needs the same bundles as the Apache server does:
cp -p "${ssldir}/certs/ca_bundle.pem" "${ssldir}/certs/ca.pem"
cp -p "${ssldir}/crl_bundle.pem" "${ssldir}/crl.pem"

# Reconfigure PE Apache to use the CRL Bundle
ruby -p -l -i.backup.${timestamp}.${idx} -e \
  'gsub(/^(\s*?)(SSLCARevocationFile\s+)(.*)$/) { "#{$1}# CVE-2011-3872 Fix (Was: #{$3})\n#{$1}#{$2}'"${ssldir}/crl_bundle.pem"'" }' \
  "${apachevhost}"
((idx++))
# Reconfigure PE Apache to authenticate the Old CA AND the New CA
ruby -p -l -i.backup.${timestamp}.${idx} -e \
  'gsub(/^(\s*?)(SSLCACertificateFile\s+)(.*)$/) { "#{$1}# CVE-2011-3872 Fix (Was: #{$3})\n#{$1}#{$2}'"${ssldir}/certs/ca_bundle.pem"'" }' \
  "${apachevhost}"
((idx++))
# This isn't strictly necessary since we only use self signed CA's and not chained CA's
ruby -p -l -i.backup.${timestamp}.${idx} -e \
  'gsub(/^(\s*?)(SSLCertificateChainFile\s+)(.*)$/) { "#{$1}# CVE-2011-3872 Fix (Was: #{$3})\n#{$1}#{$2}'"${ssldir}/certs/ca_bundle.pem"'" }' \
  "${apachevhost}"
((idx++))

echo -n "Starting Puppet Master..." >&2
puppet resource service pe-httpd ensure=running hasstatus=true 2>&1 >/dev/null
echo "done." >&2

# This regenerates MCollective Keys (If Necessary)
echo -n "Running Puppet Agent..." >&2
# Without the ||true we never get beyond this line because of set -e
puppet agent --test 2>/dev/null >/dev/null || true
echo "done." >&2

